[ykcapi/src/lib.rs:93] num_inputs = 2
[ykcapi/src/lib.rs:96] &a = 0x00007ffeaed7c994
[ykcapi/src/lib.rs:96] &a = 0x00007ffeaed7c990
[yktrace/src/lib.rs:245] &tt_info.1 = [
    0x00007ffeaed7c994,
    0x00007ffeaed7c990,
]
[yktrace/src/lib.rs:248] &x.inputs = [
    0x00007ffeaed7c994,
    0x00007ffeaed7c990,
]
[yktrace/src/lib.rs:253] &x.inputs = [
    0x00007ffeaed7c994,
    0x00007ffeaed7c990,
]
[ykcapi/src/lib.rs:106] &xx.inputs = [
    0x00007ffeaed7c994,
    0x00007ffeaed7c990,
]
--- Begin aot ---
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@switch.table.fib = private unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@.str = private unnamed_addr constant [12 x i8] c"XXX: %p %p\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"res == 21\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"/home/vext01/research/yorick/yk/c_tests/tests/fib.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1

; Function Attrs: nofree noinline nounwind uwtable writeonly
define dso_local i32 @fib(i32 %0, i32* %1) #0 !dbg !10 {
  ; fib() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %0, metadata !17, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.value(metadata i32* %1, metadata !18, metadata !DIExpression()), !dbg !22
  ; fib() tests/fib.c:33:7
  %3 = icmp ult i32 %0, 3, !dbg !23
  br i1 %3, label %10, label %4, !dbg !23

4:                                                ; preds = %2
  ; fib() tests/fib.c:39:19
  %5 = add nsw i32 %0, -2, !dbg !24
  ; fib() tests/fib.c:39:11
  %6 = call i32 @fib(i32 %5, i32* %1), !dbg !25
  ; fib() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %6, metadata !19, metadata !DIExpression()), !dbg !22
  ; fib() tests/fib.c:40:19
  %7 = add nsw i32 %0, -1, !dbg !26
  ; fib() tests/fib.c:40:11
  %8 = call i32 @fib(i32 %7, i32* %1), !dbg !27
  ; fib() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %8, metadata !20, metadata !DIExpression()), !dbg !22
  ; fib() tests/fib.c:41:13
  %9 = add nsw i32 %8, %6, !dbg !28
  ; fib() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %9, metadata !21, metadata !DIExpression()), !dbg !22
  ; fib() tests/fib.c:42:8
  store i32 %9, i32* %1, align 4, !dbg !29, !tbaa !30
  ; fib() tests/fib.c:44:1
  ret i32 %9, !dbg !34

10:                                               ; preds = %2
  ; fib() tests/fib.c:33:7
  %11 = sext i32 %0 to i64, !dbg !23
  %12 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.fib, i64 0, i64 %11, !dbg !23
  %13 = load i32, i32* %12, align 4, !dbg !23
  ret i32 %13, !dbg !23
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32 %0, i8** nocapture readnone %1) #2 !dbg !35 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %0, metadata !42, metadata !DIExpression()), !dbg !48
  store i32 %0, i32* %3, align 4, !tbaa !30
  call void @llvm.dbg.value(metadata i8** %1, metadata !43, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:47:3
  %5 = bitcast i32* %4 to i8*, !dbg !49
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7, !dbg !49
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 0, metadata !44, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:47:7
  store i32 0, i32* %4, align 4, !dbg !50, !tbaa !30
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32* %3, metadata !42, metadata !DIExpression(DW_OP_deref)), !dbg !48
  call void @llvm.dbg.value(metadata i32* %4, metadata !44, metadata !DIExpression(DW_OP_deref)), !dbg !48
  ; main() tests/fib.c:48:3
  %6 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32* nonnull %3, i32* nonnull %4), !dbg !51
  call void (i64, i64, ...) @__yktrace_start_tracing(i64 1, i64 2, i32* %3, i32* %4)
  ; main() tests/fib.c:50:13
  %7 = load i32, i32* %3, align 4, !dbg !52, !tbaa !30
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %7, metadata !42, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:50:18
  %8 = shl nsw i32 %7, 3, !dbg !53
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32* %3, metadata !42, metadata !DIExpression(DW_OP_deref)), !dbg !48
  ; main() tests/fib.c:50:9
  %9 = call i32 @fib(i32 %8, i32* nonnull %3), !dbg !54
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %9, metadata !44, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:50:7
  store i32 %9, i32* %4, align 4, !dbg !55, !tbaa !30
  ; main() tests/fib.c:51:14
  %10 = call i8* @__yktrace_stop_tracing() #7, !dbg !56
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i8* %10, metadata !45, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:52:3
  %11 = load i32, i32* %4, align 4, !dbg !57, !tbaa !30
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %11, metadata !44, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:52:3
  %12 = icmp eq i32 %11, 21, !dbg !57
  br i1 %12, label %14, label %13, !dbg !60

13:                                               ; preds = %2
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #8, !dbg !57
  unreachable, !dbg !57

14:                                               ; preds = %2
  ; main() tests/fib.c:54:14
  %15 = call i8* @__yktrace_irtrace_compile(i8* %10) #7, !dbg !61
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i8* %15, metadata !47, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:55:3
  call void @__yktrace_drop_irtrace(i8* %10) #7, !dbg !62
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 0, metadata !44, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:57:7
  store i32 0, i32* %4, align 4, !dbg !63, !tbaa !30
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 1, metadata !42, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:58:8
  store i32 1, i32* %3, align 4, !dbg !64, !tbaa !30
  ; main() tests/fib.c:59:3
  call void @__yktrace_compiledtrace_exec(i8* %15) #7, !dbg !65
  ; main() tests/fib.c:60:3
  %16 = load i32, i32* %4, align 4, !dbg !66, !tbaa !30
  ; main() tests/fib.c:0
  call void @llvm.dbg.value(metadata i32 %16, metadata !44, metadata !DIExpression()), !dbg !48
  ; main() tests/fib.c:60:3
  %17 = icmp eq i32 %16, 21, !dbg !66
  br i1 %17, label %19, label %18, !dbg !69

18:                                               ; preds = %14
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #8, !dbg !66
  unreachable, !dbg !66

19:                                               ; preds = %14
  ; main() tests/fib.c:47:3
  %20 = bitcast i32* %4 to i8*, !dbg !49
  ; main() tests/fib.c:63:1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #7, !dbg !70
  ; main() tests/fib.c:62:3
  ret i32 0, !dbg !71
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

declare dso_local void @__yktrace_start_tracing(i64, i64, ...) local_unnamed_addr #5

declare dso_local i8* @__yktrace_stop_tracing() local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #6

declare dso_local i8* @__yktrace_irtrace_compile(i8*) local_unnamed_addr #5

declare dso_local void @__yktrace_drop_irtrace(i8*) local_unnamed_addr #5

declare dso_local void @__yktrace_compiledtrace_exec(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

attributes #0 = { nofree noinline nounwind uwtable writeonly "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nofree nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.ident = !{!3}
!llvm.module.flags = !{!4, !5, !6, !7, !8, !9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0 (https://vext01@github.com/vext01/llvm-project 502b95f0d870f2e2b6ae45d45c54b5523a12e4df)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/vext01/research/yorick/yk/c_tests/tests/fib.c", directory: "/home/vext01/research/yorick/yk/c_tests")
!2 = !{}
!3 = !{!"clang version 12.0.0 (https://vext01@github.com/vext01/llvm-project 502b95f0d870f2e2b6ae45d45c54b5523a12e4df)"}
!4 = !{i32 7, !"Dwarf Version", i32 4}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{i32 1, !"ThinLTO", i32 0}
!8 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!9 = !{i32 1, !"LTOPostLink", i32 1}
!10 = distinct !DISubprogram(name: "fib", scope: !11, file: !11, line: 32, type: !12, scopeLine: 32, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !16)
!11 = !DIFile(filename: "tests/fib.c", directory: "/home/vext01/research/yorick/yk/c_tests")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14, !15}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!16 = !{!17, !18, !19, !20, !21}
!17 = !DILocalVariable(name: "num", arg: 1, scope: !10, file: !11, line: 32, type: !14)
!18 = !DILocalVariable(name: "tcp", arg: 2, scope: !10, file: !11, line: 32, type: !15)
!19 = !DILocalVariable(name: "a", scope: !10, file: !11, line: 39, type: !14)
!20 = !DILocalVariable(name: "b", scope: !10, file: !11, line: 40, type: !14)
!21 = !DILocalVariable(name: "c", scope: !10, file: !11, line: 41, type: !14)
!22 = !DILocation(line: 0, scope: !10)
!23 = !DILocation(line: 33, column: 7, scope: !10)
!24 = !DILocation(line: 39, column: 19, scope: !10)
!25 = !DILocation(line: 39, column: 11, scope: !10)
!26 = !DILocation(line: 40, column: 19, scope: !10)
!27 = !DILocation(line: 40, column: 11, scope: !10)
!28 = !DILocation(line: 41, column: 13, scope: !10)
!29 = !DILocation(line: 42, column: 8, scope: !10)
!30 = !{!31, !31, i64 0}
!31 = !{!"int", !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = !DILocation(line: 44, column: 1, scope: !10)
!35 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 46, type: !36, scopeLine: 46, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !41)
!36 = !DISubroutineType(types: !37)
!37 = !{!14, !14, !38}
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!40 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!41 = !{!42, !43, !44, !45, !47}
!42 = !DILocalVariable(name: "argc", arg: 1, scope: !35, file: !11, line: 46, type: !14)
!43 = !DILocalVariable(name: "argv", arg: 2, scope: !35, file: !11, line: 46, type: !38)
!44 = !DILocalVariable(name: "res", scope: !35, file: !11, line: 47, type: !14)
!45 = !DILocalVariable(name: "tr", scope: !35, file: !11, line: 51, type: !46)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!47 = !DILocalVariable(name: "ct", scope: !35, file: !11, line: 54, type: !46)
!48 = !DILocation(line: 0, scope: !35)
!49 = !DILocation(line: 47, column: 3, scope: !35)
!50 = !DILocation(line: 47, column: 7, scope: !35)
!51 = !DILocation(line: 48, column: 3, scope: !35)
!52 = !DILocation(line: 50, column: 13, scope: !35)
!53 = !DILocation(line: 50, column: 18, scope: !35)
!54 = !DILocation(line: 50, column: 9, scope: !35)
!55 = !DILocation(line: 50, column: 7, scope: !35)
!56 = !DILocation(line: 51, column: 14, scope: !35)
!57 = !DILocation(line: 52, column: 3, scope: !58)
!58 = distinct !DILexicalBlock(scope: !59, file: !11, line: 52, column: 3)
!59 = distinct !DILexicalBlock(scope: !35, file: !11, line: 52, column: 3)
!60 = !DILocation(line: 52, column: 3, scope: !59)
!61 = !DILocation(line: 54, column: 14, scope: !35)
!62 = !DILocation(line: 55, column: 3, scope: !35)
!63 = !DILocation(line: 57, column: 7, scope: !35)
!64 = !DILocation(line: 58, column: 8, scope: !35)
!65 = !DILocation(line: 59, column: 3, scope: !35)
!66 = !DILocation(line: 60, column: 3, scope: !67)
!67 = distinct !DILexicalBlock(scope: !68, file: !11, line: 60, column: 3)
!68 = distinct !DILexicalBlock(scope: !35, file: !11, line: 60, column: 3)
!69 = !DILocation(line: 60, column: 3, scope: !68)
!70 = !DILocation(line: 63, column: 1, scope: !35)
!71 = !DILocation(line: 62, column: 3, scope: !35)
--- End aot ---
hi
XXX: 0x2199fc0
XXX: 0x219a030
don't know how to handle operand:   %12 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.fib, i64 0, i64 %11, !dbg !23
